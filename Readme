
🕵️ ScanScavvy
ScanScavvy is a mobile scavenger hunt app built with React Native (Expo Go) on the frontend and Express.js (Node.js) on the backend.
Currently, the backend is exposed worldwide using ngrok, so the API endpoint URL in api.js must be updated to match the ngrok address every time you restart the tunnel.

🚀 Features
User-friendly React Native frontend working via Expo Go

Express.js backend API for handling game logic

Global access to backend via ngrok tunnel

Token-based scavenger hunt challenges and responses

🧩 Tech Stack
Part	Technology
Frontend	React Native + Expo Go
Backend	Node.js + Express.js
Network	ngrok (exposes localhost globally)

🛠️ Getting Started
1. Clone the repo
bash
Copy
Edit
git clone https://github.com/Subhash-777/ScanScavvy.git
cd ScanScavvy
2. Install dependencies
Backend:

bash
Copy
Edit
cd backend
npm install
Frontend:

bash
Copy
Edit
cd ../frontend
npm install
💡 Running Locally
Backend
Start your Express server:

bash
Copy
Edit
cd backend
npm start
In a separate terminal, launch ngrok to expose your local backend:

bash
Copy
Edit
ngrok http 3000
Copy the generated ngrok URL (e.g. https://abcd1234.ngrok.io) and update it in the frontend's api.js file as the API_BASE_URL.

Frontend (React Native)
Open the project in your terminal:

bash
Copy
Edit
cd frontend
expo start
Launch Expo on your device or emulator. The app will use the updated API URL and communicate with your live backend.

📁 File Structure
pgsql
Copy
Edit
ScanScavvy/
├── backend/
│   ├── index.js           ← Express server entry point
│   └── routes/            ← API routes (e.g. game logic)
├── frontend/
│   ├── App.js             ← Root of the React Native app
│   ├── api.js             ← API URL configuration (ngrok URL goes here)
│   └── components/        ← UI components
├── README.md
└── .gitignore
🧠 Updating API URL
Every time you restart ngrok, follow these steps:

Run ngrok http 3000 again.

Copy the new public URL (starts with https://).

Open frontend/api.js and replace the existing base URL with the new one.

Save and restart your Expo app so it points at the updated backend.

🔄 Future Improvements
🔐 Use static backend hosting or cloud deployment (AWS, Heroku, Vercel) to eliminate ngrok overhead

🧾 Add environment variables to store API URL dynamically

⚙️ Implement authentication (JWT or OAuth) for secure player sessions

♻️ Persist user/game data in a database (MongoDB, PostgreSQL)

🧩 Enhance frontend UI with polished design and animations

👩‍💻 Usage Workflow
Player installs the Expo Go app and scans the project QR code.

App fetches scavenger hunt tasks from the Express API via the exposed ngrok URL.

Player completes tasks, scans codes, or uploads results.

API validates and logs progress, responding with updates.

App displays real-time game status and feedback.

🧪 Troubleshooting
❌ App can’t reach backend?

Check that ngrok is running and you’re using the current URL in api.js.

Confirm backend server is active (npm start without errors).

🛑 Expo gives CORS or network errors?

Consider adding CORS middleware in Express (e.g., cors npm package).

Remake the connection after updating the ngrok URL.

📜 License
Add your license (e.g. MIT) here.

🙏 Credits
Project by Subhash – powered by React Native, Express.js, and ngrok magic. 🧰